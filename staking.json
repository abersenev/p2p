{
  "openapi": "3.0.0",
  "info": {
    "title": "Staking API",
    "description": "API used for staking",
    "version": "1.0.0",
    "contact": {}
  },
  "servers": [],
  "tags": [],
  "paths": {
    "/api/v1/eth/staking/direct/nodes-request/create": {
      "post": {
        "operationId": "NodesRequestController_create",
        "summary": "Set up nodes",
        "description": "Set up nodes for staking using P2P infrastructure.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNodesRequestRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestCreateException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum Request Nodes"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/nodes-request/status/{id}": {
      "get": {
        "operationId": "NodesRequestController_status",
        "summary": "Check status",
        "description": "Check the status of the node set-up operation.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "UUID that was specified in the node set-up request.",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestNotFoundException"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NodesRequestGetException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum Request Nodes"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/tx/deposit": {
      "post": {
        "operationId": "StakingController_deposit",
        "summary": "Stake funds",
        "description": "Stake the funds on P2P infrastructure.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StakeEthereumRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum Staking"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/tx/withdrawal": {
      "post": {
        "operationId": "StakingController_withdrawal",
        "summary": "Unstake funds",
        "description": "Unstake the funds on P2P infrastructure.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnstakeEthereumRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/UnsignedTransactionResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Web3CreateTransactionException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum Staking"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/validator/status": {
      "post": {
        "operationId": "ValidatorController_status",
        "summary": "Check status",
        "description": "Check the status of the validators.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatorsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/ValidatorsResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/BeaconchainGetDataException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum Validator"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eth/staking/direct/data/rewards": {
      "post": {
        "operationId": "RewardsController_rewards",
        "summary": "Get rewards",
        "description": "Get list of rewards for the given period.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RewardsEthereumRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    }
                  ],
                  "properties": {
                    "result": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/RewardsEthereumListResponse"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/NoTokenException"
                        },
                        {
                          "$ref": "#/components/schemas/WrongTokenException"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExceptionResponse"
                    }
                  ],
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/HasuraGetRewardsException"
                        },
                        {
                          "$ref": "#/components/schemas/TokenGuardException"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Ethereum Rewards"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "nullable": true,
            "default": null
          },
          "result": {
            "type": "object"
          }
        },
        "required": [
          "error",
          "result"
        ]
      },
      "ExceptionResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object"
          },
          "result": {
            "type": "object",
            "nullable": true,
            "default": null
          }
        },
        "required": [
          "error",
          "result"
        ]
      },
      "DepositDataResponse": {
        "type": "object",
        "properties": {
          "pubkey": {
            "type": "string",
            "description": "Validator public key."
          },
          "signature": {
            "type": "string",
            "description": "Validator signature."
          },
          "depositDataRoot": {
            "type": "string",
            "description": "Transaction root hash."
          }
        },
        "required": [
          "pubkey",
          "signature",
          "depositDataRoot"
        ]
      },
      "NodesRequestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the set-up operation."
          },
          "status": {
            "type": "string",
            "enum": [
              "init",
              "ready",
              "cancel"
            ],
            "description": "<p>Current status of the operation:</p><ul><li><i>init</i> — node setup in progress.</li><li><i>ready</i> — node setup was successful.</li><li><i>cancel</i> — node setup was cancelled.</li></ul>"
          },
          "validatorsCount": {
            "type": "number",
            "description": "Number of validators."
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address for the validators.",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "depositData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepositDataResponse"
            }
          }
        },
        "required": [
          "id",
          "status",
          "validatorsCount",
          "withdrawalAddress"
        ]
      },
      "NoTokenException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 101111
          },
          "message": {
            "type": "string",
            "default": "No token"
          },
          "name": {
            "type": "string",
            "default": "NoTokenException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "WrongTokenException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 101109
          },
          "message": {
            "type": "string",
            "default": "Wrong token"
          },
          "name": {
            "type": "string",
            "default": "WrongTokenException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NodesRequestCreateException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107108
          },
          "message": {
            "type": "string",
            "default": "Error creating nodes request"
          },
          "name": {
            "type": "string",
            "default": "NodesRequestCreateException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "TokenGuardException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 101110
          },
          "message": {
            "type": "string",
            "default": "Token guard error"
          },
          "name": {
            "type": "string",
            "default": "TokenGuardException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NodesOptionsRequest": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "description": "Node location. Currently, only `any` is supported."
          }
        },
        "required": [
          "location"
        ]
      },
      "CreateNodesRequestRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Arbitrary UUID. You can later use that UUID to check the status of the set-up operation."
          },
          "validatorsCount": {
            "type": "number",
            "description": "Number of validators. One validator is equal to 32 ETH.",
            "default": 1,
            "minimum": 1
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address for the validators.",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "nodesOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodesOptionsRequest"
            }
          }
        },
        "required": [
          "id",
          "validatorsCount",
          "withdrawalAddress",
          "nodesOptions"
        ],
        "example": {
          "id": "24df3fe2-f7ad-46ed-9050-d35a76da2fe4",
          "validatorsCount": 1,
          "withdrawalAddress": "0x98a3BcBb47D8504ac12975f5ab5067BfbaDE1780",
          "nodesOptions": [
            {
              "location": "any"
            }
          ]
        }
      },
      "NodesRequestNotFoundException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107106
          },
          "message": {
            "type": "string",
            "default": "Nodes request not found"
          },
          "name": {
            "type": "string",
            "default": "NodesRequestNotFoundException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "NodesRequestGetException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 107109
          },
          "message": {
            "type": "string",
            "default": "Error getting nodes request"
          },
          "name": {
            "type": "string",
            "default": "NodesRequestGetException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "UnsignedTransactionResponse": {
        "type": "object",
        "properties": {
          "transaction": {
            "type": "string",
            "description": "Serialized unsigned transaction."
          }
        },
        "required": [
          "transaction"
        ]
      },
      "Web3CreateTransactionException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 105103
          },
          "message": {
            "type": "string",
            "default": "Could not create transaction"
          },
          "name": {
            "type": "string",
            "default": "Web3CreateTransactionException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "DepositDataRequest": {
        "type": "object",
        "properties": {
          "pubkey": {
            "type": "string",
            "description": "Validator public key."
          },
          "signature": {
            "type": "string",
            "description": "Validator signature."
          },
          "depositDataRoot": {
            "type": "string",
            "description": "Transaction root hash."
          }
        },
        "required": [
          "pubkey",
          "signature",
          "depositDataRoot"
        ]
      },
      "StakeEthereumRequest": {
        "type": "object",
        "properties": {
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address.",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "depositData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepositDataRequest"
            }
          }
        },
        "required": [
          "withdrawalAddress",
          "depositData"
        ],
        "example": {
          "withdrawalAddress": "0x98a3BcBb47D8504ac12975f5ab5067BfbaDE1780",
          "depositData": [
            {
              "pubkey": "80fc756a082180f9408e83b9717b2bd4f79b864243b3cf187b64f25c2ddc4ebe17e7bf3086d863b5733c3adb0d769065",
              "signature": "966c9558ae8533f0046ea71d51f293e26b943d21ee97482d53c150bdb8d646fe2ca7a685f6a17a534ad538b1e64672591049159c661e5904bca7c9032f75e57584c6f1583182f99858327611094b700f7dcad7480dd9678da706ef74d7ce732d",
              "depositDataRoot": "b0878d8d83a76a60f059eb17b21ca10a5e0748bbf634b46c27f2da955d69f341"
            }
          ]
        }
      },
      "UnstakeEthereumRequest": {
        "type": "object",
        "properties": {
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address.",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "depositData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepositDataRequest"
            }
          }
        },
        "required": [
          "withdrawalAddress",
          "depositData"
        ],
        "example": {
          "withdrawalAddress": "0x98a3BcBb47D8504ac12975f5ab5067BfbaDE1780",
          "depositData": [
            {
              "pubkey": "80fc756a082180f9408e83b9717b2bd4f79b864243b3cf187b64f25c2ddc4ebe17e7bf3086d863b5733c3adb0d769065",
              "signature": "966c9558ae8533f0046ea71d51f293e26b943d21ee97482d53c150bdb8d646fe2ca7a685f6a17a534ad538b1e64672591049159c661e5904bca7c9032f75e57584c6f1583182f99858327611094b700f7dcad7480dd9678da706ef74d7ce732d",
              "depositDataRoot": "b0878d8d83a76a60f059eb17b21ca10a5e0748bbf634b46c27f2da955d69f341"
            }
          ]
        }
      },
      "ValidatorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "deposited",
              "pending",
              "active_online",
              "active_offline",
              "slashed",
              "exited"
            ],
            "description": "<p>Validator status:</p><ul><li><i>deposited</i> — deposit processed by Ethereum Beacon Chain.</li><li><i>pending</i> — validator in activation queue.</li><li><i>active_online</i> — validator activated and participating in testing and proposing blocks.</li><li><i>active_offline</i> — validator offline and not participating in activities.</li><li><i>slashed</i> — validator slashed due to misbehavior.</li><li><i>exited</i> — validator exited network and no longer a validator.</li></ul>"
          },
          "amount": {
            "type": "number",
            "description": "Total stake amount for the validator."
          },
          "pubkey": {
            "type": "string",
            "description": "Validator public key."
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address for the validator.",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "status",
          "amount",
          "pubkey",
          "withdrawalAddress"
        ]
      },
      "ValidatorsResponse": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorResponse"
            }
          }
        },
        "required": [
          "list"
        ]
      },
      "BeaconchainGetDataException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 104100
          },
          "message": {
            "type": "string",
            "default": "Beaconchain not available"
          },
          "name": {
            "type": "string",
            "default": "BeaconchainGetDataException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "ValidatorsRequest": {
        "type": "object",
        "properties": {
          "pubkeys": {
            "description": "List of validator public keys",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "pubkeys"
        ],
        "example": {
          "pubkeys": [
            "80fc756a082180f9408e83b9717b2bd4f79b864243b3cf187b64f25c2ddc4ebe17e7bf3086d863b5733c3adb0d769065"
          ]
        }
      },
      "RewardsEthereumResponse": {
        "type": "object",
        "properties": {
          "periodPaymentDateAt": {
            "type": "string",
            "format": "date-time",
            "description": "Payment date."
          },
          "rewardAmount": {
            "type": "string",
            "format": "uuid",
            "description": "Reward amount."
          },
          "rewardType": {
            "type": "string",
            "format": "uuid",
            "description": "Reward type."
          }
        },
        "required": [
          "periodPaymentDateAt",
          "rewardAmount",
          "rewardType"
        ]
      },
      "RewardsEthereumListResponse": {
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardsEthereumResponse"
            }
          }
        },
        "required": [
          "list"
        ]
      },
      "HasuraGetRewardsException": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "default": 106100
          },
          "message": {
            "type": "string",
            "default": "Analytics get rewards not available"
          },
          "name": {
            "type": "string",
            "default": "HasuraGetRewardsException"
          }
        },
        "required": [
          "code",
          "message",
          "name"
        ]
      },
      "RewardsEthereumRequest": {
        "type": "object",
        "properties": {
          "startAt": {
            "type": "string",
            "format": "date-time",
            "description": "Start of the reward period."
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "description": "End of the reward period."
          },
          "withdrawalAddress": {
            "type": "string",
            "description": "Withdrawal address of the validator.",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": [
          "startAt",
          "endAt",
          "withdrawalAddress"
        ],
        "example": {
          "startAt": "2023-05-30T06:46:04.415Z",
          "endAt": "2023-06-30T06:46:04.415Z",
          "withdrawalAddress": "0x98a3BcBb47D8504ac12975f5ab5067BfbaDE1780"
        }
      }
    }
  }
}